service: practice-apigateway-websocket-chat

plugins:
  - serverless-offline
  - serverless-dynamodb-local

custom:
  dynamodb:
    stages:
      - ${self:provider.stage}
    start:
      port: 8000
      inMemory: true
      migrate: true

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: ap-northeast-1
  environment:
    CONNECTIONS_TABLE: ${self:service}-${opt:stage, self:provider.stage}_connections
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}/index/*"

functions:
  connect:
    handler: handler.connect
    events:
      - websocket:
          route: $connect # authorizers are only for connect routes
  default:
    handler: handler.sendMessage
    events:
      - websocket:
          route: $default

  ping:
    handler: handler.ping
    events:
      - websocket:
          route: ping
 
  disconnect:
    handler: handler.disconnect
    events:
      - websocket:
          route: $disconnect
 
resources:
  Resources:
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        SSESpecification:
          SSEEnabled: True
